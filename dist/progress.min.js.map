{"version":3,"file":"progress.min.js","sources":["../ts/progress.ts"],"sourcesContent":["export class Progress {\n\n    private readonly _element: HTMLDivElement;\n    private _outer: HTMLDivElement;\n    private _progress_text: HTMLDivElement;\n\n    private _circle_color: string;\n    private _circle_progress_color: string;\n    private _current_progress = 0;\n\n    constructor( element: HTMLDivElement ) {\n\n        this._element = element;\n        this._addChildren();\n        this._getColors();\n\n    }\n\n    /**\n     * adds necessary child divs to root element\n     * @private\n     */\n    private _addChildren() {\n\n        this._element.innerHTML = '<div class=\"outer\"><div class=\"inner\"><div class=\"progress-text\"></div></div></div>';\n        this._outer = this._element.querySelector( '.outer' );\n        this._progress_text = this._element.querySelector( '.progress-text' );\n\n    }\n\n    /**\n     * read the circle and progress color from the stylesheet\n     * @private\n     */\n    private _getColors() {\n\n        const color = document.createElement( 'div' );\n        color.classList.add( 'color' );\n        this._element.appendChild( color );\n\n        const style = window.getComputedStyle( color );\n        this._circle_progress_color = style.getPropertyValue( 'background-color' );\n        this._circle_color = style.getPropertyValue( 'color' );\n\n        this._element.removeChild( color );\n\n    }\n\n    /**\n     * move the progress color to the desired position\n     * @param {number} progress progress in percent\n     * @private\n     */\n    private _progress( progress: number ) {\n\n        if ( progress <= 50 ) {\n            this._outer.style.backgroundColor = this._circle_progress_color;\n            this._outer.style.backgroundImage = `linear-gradient(${90+(360*progress/100)}deg, transparent 50%, ${this._circle_color} 50%), linear-gradient(90deg, ${this._circle_color} 50%, transparent 50%)`;\n        }\n        else {\n            this._outer.style.backgroundColor = this._circle_progress_color;\n            this._outer.style.backgroundImage = `linear-gradient(${-90+(360*progress/100)}deg, transparent 50%, ${this._circle_progress_color} 50%), linear-gradient(90deg, ${this._circle_color} 50%, transparent 50%)`;\n        }\n\n        this._progress_text.innerText = `${Math.round(progress)}%`;\n\n    }\n\n    /**\n     * animate progress over time\n     * @param {number} progress progress in percent\n     * @param {number} time animation time in milliseconds\n     * @param {number} start start time\n     * @private\n     */\n    private _animate( progress, time, start ) {\n\n        const _this = this;\n\n        requestAnimationFrame( function ( timestamp ) {\n\n            if ( start === null ) {\n                start = timestamp;\n                _this._animate( progress, time, start );\n            }\n            else if ( timestamp - start > time ) {\n                console.log( progress );\n                _this.progress( progress );\n            }\n            else {\n                _this._progress( _this._current_progress + ( progress - _this._current_progress ) * ( timestamp - start ) / time );\n                _this._animate( progress, time, start );\n            }\n        });\n\n    }\n\n    /**\n     * set current progress immediately\n     * @param {number} progress progress in percent\n     */\n    public progress( progress: number ) {\n\n        this._progress( progress );\n        this._current_progress = progress;\n\n    }\n\n    /**\n     * move to specified progress over time\n     * @param {number} progress progress in percent\n     * @param {number} time animation time\n     */\n    public progress_animate( progress: number, time: number ) {\n\n        this._animate( progress, time, null );\n\n    }\n\n}"],"names":["element","this","_element","_addChildren","_getColors","Progress","innerHTML","_outer","querySelector","_progress_text","color","document","createElement","classList","add","appendChild","style","window","getComputedStyle","_circle_progress_color","getPropertyValue","_circle_color","removeChild","progress","backgroundColor","backgroundImage","innerText","Math","round","time","start","_this","requestAnimationFrame","timestamp","_animate","console","log","_progress","_current_progress"],"mappings":"uDAUI,WAAaA,GAFLC,uBAAoB,EAIxBA,KAAKC,SAAWF,EAChBC,KAAKE,eACLF,KAAKG,aAyGb,OAjGYC,yBAAR,WAEIJ,KAAKC,SAASI,UAAY,sFAC1BL,KAAKM,OAASN,KAAKC,SAASM,cAAe,UAC3CP,KAAKQ,eAAiBR,KAAKC,SAASM,cAAe,mBAQ/CH,uBAAR,WAEI,IAAMK,EAAQC,SAASC,cAAe,OACtCF,EAAMG,UAAUC,IAAK,SACrBb,KAAKC,SAASa,YAAaL,GAE3B,IAAMM,EAAQC,OAAOC,iBAAkBR,GACvCT,KAAKkB,uBAAyBH,EAAMI,iBAAkB,oBACtDnB,KAAKoB,cAAgBL,EAAMI,iBAAkB,SAE7CnB,KAAKC,SAASoB,YAAaZ,IASvBL,sBAAR,SAAmBkB,GAEVA,GAAY,IACbtB,KAAKM,OAAOS,MAAMQ,gBAAkBvB,KAAKkB,uBACzClB,KAAKM,OAAOS,MAAMS,gBAAkB,oBAAmB,GAAI,IAAIF,EAAS,8BAA6BtB,KAAKoB,+CAA8CpB,KAAKoB,yCAG7JpB,KAAKM,OAAOS,MAAMQ,gBAAkBvB,KAAKkB,uBACzClB,KAAKM,OAAOS,MAAMS,gBAAkB,oBAAwB,IAAIF,EAAS,IAAjB,6BAA8CtB,KAAKkB,wDAAuDlB,KAAKoB,wCAG3KpB,KAAKQ,eAAeiB,UAAeC,KAAKC,MAAML,QAW1ClB,qBAAR,SAAkBkB,EAAUM,EAAMC,GAE9B,IAAMC,EAAQ9B,KAEd+B,sBAAuB,SAAWC,GAEf,OAAVH,GACDA,EAAQG,EACRF,EAAMG,SAAUX,EAAUM,EAAMC,IAEND,EAApBI,EAAYH,GAClBK,QAAQC,IAAKb,GACbQ,EAAMR,SAAUA,KAGhBQ,EAAMM,UAAWN,EAAMO,mBAAsBf,EAAWQ,EAAMO,oBAAwBL,EAAYH,GAAUD,GAC5GE,EAAMG,SAAUX,EAAUM,EAAMC,OAUrCzB,qBAAP,SAAiBkB,GAEbtB,KAAKoC,UAAWd,GAChBtB,KAAKqC,kBAAoBf,GAStBlB,6BAAP,SAAyBkB,EAAkBM,GAEvC5B,KAAKiC,SAAUX,EAAUM,EAAM"}